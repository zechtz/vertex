name: Build and Release

on:
  pull_request:
    branches:
      - main
  push:
    tags:
      - "v*" # Triggers on version tags like v1.0.0
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-14
            goos: darwin
            goarch: arm64
          - os: ubuntu-latest
            goos: windows
            goarch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "yarn"
          cache-dependency-path: web/yarn.lock

      - name: Install frontend dependencies
        run: |
          cd web
          yarn install --frozen-lockfile

      - name: Build frontend
        run: |
          cd web
          yarn build

      - name: Install cross-compilation tools
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            sudo apt-get update
            if [ "${{ matrix.goos }}" = "windows" ]; then
              sudo apt-get install -y gcc-mingw-w64
            elif [ "${{ matrix.goos }}" = "linux" ] && [ "${{ matrix.goarch }}" = "arm64" ]; then
              sudo apt-get install -y gcc-aarch64-linux-gnu
            else
              sudo apt-get install -y gcc-multilib
            fi
          elif [[ "${{ matrix.os }}" == macos* ]]; then
            echo "Using native macOS compilation"
          fi

      - name: Set up cross-compilation environment
        run: |
          if [ "${{ matrix.goos }}" = "windows" ]; then
            echo "CC=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
          elif [ "${{ matrix.goos }}" = "linux" ] && [ "${{ matrix.goarch }}" = "arm64" ]; then
            echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          fi

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
        run: |
          BINARY_NAME="vertex-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          go build -ldflags="-s -w" -o "${BINARY_NAME}"

          if [[ "${{ matrix.os }}" == macos* ]]; then
            shasum -a 256 "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
          else
            sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
          fi

      - name: Upload artifacts
        if: github.event_name != 'pull_request' # don't upload artifacts for PRs
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            vertex-${{ matrix.goos }}-${{ matrix.goarch }}*

  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "yarn"
          cache-dependency-path: web/yarn.lock

      - name: Build frontend
        run: |
          cd web
          yarn install --frozen-lockfile
          yarn build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/vertex
          tags: |
            type=ref,event=tag
            type=raw,value=latest
            type=raw,value={{version}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  release:
    name: Create Release
    needs: [build, docker]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          merge-multiple: true

      - name: List downloaded files
        run: |
          echo "Downloaded files:"
          find . -name "vertex-*" -type f
          find . -name "*.sha256" -type f

      - name: Generate release notes
        run: |
          echo "# Vertex Service Manager ${GITHUB_REF#refs/tags/}" > release-notes.md
          echo "" >> release-notes.md
          echo "## ðŸš€ Features" >> release-notes.md
          echo "- Complete microservice management platform" >> release-notes.md
          echo "- Embedded React web interface" >> release-notes.md
          echo "- Cross-platform support" >> release-notes.md
          echo "- Real-time monitoring and logs" >> release-notes.md
          echo "" >> release-notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            vertex-*
          body_path: release-notes.md
          draft: false
          prerelease: false
