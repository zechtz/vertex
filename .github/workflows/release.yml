name: Build and Release

on:
  push:
    tags:
      - "v*" # Triggers on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: write

jobs:
  build:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux builds on Ubuntu
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
          # macOS builds on macOS (native compilation)
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-14
            goos: darwin
            goarch: arm64
          # Windows builds on Ubuntu with cross-compilation
          - os: ubuntu-latest
            goos: windows
            goarch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: web/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd web
          npm ci

      - name: Build frontend
        run: |
          cd web
          npm run build

      - name: Install cross-compilation tools
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            # Linux/Ubuntu setup
            sudo apt-get update
            if [ "${{ matrix.goos }}" = "windows" ]; then
              sudo apt-get install -y gcc-mingw-w64
            elif [ "${{ matrix.goos }}" = "linux" ] && [ "${{ matrix.goarch }}" = "arm64" ]; then
              sudo apt-get install -y gcc-aarch64-linux-gnu
            else
              sudo apt-get install -y gcc-multilib
            fi
          elif [[ "${{ matrix.os }}" == macos* ]]; then
            # macOS setup - use native compilation
            echo "Using native macOS compilation"
          fi

      - name: Set up cross-compilation environment
        run: |
          if [ "${{ matrix.goos }}" = "windows" ]; then
            echo "CC=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
          elif [ "${{ matrix.goos }}" = "linux" ] && [ "${{ matrix.goarch }}" = "arm64" ]; then
            echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          fi

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
        run: |
          # Set binary name with platform suffix
          BINARY_NAME="nest-up-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi

          # Build with optimizations
          go build -ldflags="-s -w -X main.version=${GITHUB_REF#refs/tags/}" -o "${BINARY_NAME}"

          # Create checksum (different commands for different OS)
          if [[ "${{ matrix.os }}" == macos* ]]; then
            shasum -a 256 "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
          else
            sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            nest-up-${{ matrix.goos }}-${{ matrix.goarch }}*
            *.sha256

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          merge-multiple: true

      - name: List downloaded files
        run: |
          echo "Downloaded files:"
          find . -name "nest-up-*" -type f
          find . -name "*.sha256" -type f

      - name: Generate release notes
        run: |
          echo "# NeST Service Manager ${GITHUB_REF#refs/tags/}" > release-notes.md
          echo "" >> release-notes.md
          echo "## ðŸš€ Features" >> release-notes.md
          echo "- Complete service management for NeST microservices" >> release-notes.md
          echo "- Embedded React web interface (no external dependencies)" >> release-notes.md
          echo "- Automatic environment variable setup" >> release-notes.md
          echo "- Lombok compatibility fixing" >> release-notes.md
          echo "- Real-time service monitoring and logs" >> release-notes.md
          echo "" >> release-notes.md
          echo "## ðŸ“¦ Downloads" >> release-notes.md
          echo "" >> release-notes.md
          echo "| Platform | Architecture | Download |" >> release-notes.md
          echo "|----------|--------------|----------|" >> release-notes.md
          echo "| Linux | x64 | \`nest-up-linux-amd64\` |" >> release-notes.md
          echo "| Linux | ARM64 | \`nest-up-linux-arm64\` |" >> release-notes.md
          echo "| macOS | x64 | \`nest-up-darwin-amd64\` |" >> release-notes.md
          echo "| macOS | ARM64 (M1/M2) | \`nest-up-darwin-arm64\` |" >> release-notes.md
          echo "| Windows | x64 | \`nest-up-windows-amd64.exe\` |" >> release-notes.md
          echo "" >> release-notes.md
          echo "## ðŸ”§ Installation" >> release-notes.md
          echo "" >> release-notes.md
          echo '```bash' >> release-notes.md
          echo "# Download for your platform" >> release-notes.md
          echo "wget https://github.com/${{ github.repository }}/releases/download/${GITHUB_REF#refs/tags/}/nest-up-linux-amd64" >> release-notes.md
          echo "" >> release-notes.md
          echo "# Make executable" >> release-notes.md
          echo "chmod +x nest-up-linux-amd64" >> release-notes.md
          echo "" >> release-notes.md
          echo "# Run" >> release-notes.md
          echo "./nest-up-linux-amd64" >> release-notes.md
          echo '```' >> release-notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            nest-up-*
            *.sha256
          body_path: release-notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
