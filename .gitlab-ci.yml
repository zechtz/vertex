# GitLab CI/CD Pipeline for NeST Service Manager
variables:
  GO_VERSION: "1.21"
  NODE_VERSION: "18"

stages:
  - test
  - build
  - release

# Cache for faster builds
.cache:
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - .cache/go/
      - web/node_modules/

# Test stage (runs on all pushes)
test:
  stage: test
  image: golang:${GO_VERSION}
  extends: .cache
  before_script:
    - mkdir -p .cache/go
    - export GOPATH="$CI_PROJECT_DIR/.cache/go"
    - export PATH="$GOPATH/bin:$PATH"
  script:
    - go mod tidy
    - go vet ./...
    - go test -race -coverprofile=coverage.out ./...
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.out
  only:
    - branches
    - tags

# Build frontend (runs on tags)
build-frontend:
  stage: build
  image: node:${NODE_VERSION}
  extends: .cache
  script:
    - cd web
    - npm ci
    - npm run build
  artifacts:
    paths:
      - web/dist/
    expire_in: 1 hour
  only:
    - tags

# Build binaries for multiple platforms
.build-binary: &build-binary
  stage: build
  image: golang:${GO_VERSION}
  extends: .cache
  dependencies:
    - build-frontend
  before_script:
    - apt-get update && apt-get install -y gcc-multilib gcc-mingw-w64
    - mkdir -p .cache/go
    - export GOPATH="$CI_PROJECT_DIR/.cache/go"
    - export PATH="$GOPATH/bin:$PATH"
  script:
    - |
      # Set binary name
      BINARY_NAME="nest-up-${GOOS}-${GOARCH}"
      if [ "$GOOS" = "windows" ]; then
        BINARY_NAME="${BINARY_NAME}.exe"
        export CC=x86_64-w64-mingw32-gcc
      fi

      # Build binary with version info
      CGO_ENABLED=1 GOOS=$GOOS GOARCH=$GOARCH go build \
        -ldflags="-s -w -X main.version=$CI_COMMIT_TAG" \
        -o "$BINARY_NAME"

      # Create checksum
      sha256sum "$BINARY_NAME" > "${BINARY_NAME}.sha256"

      # Store in artifacts
      mkdir -p binaries
      mv "$BINARY_NAME" "$BINARY_NAME.sha256" binaries/
  artifacts:
    paths:
      - binaries/
    expire_in: 1 day
  only:
    - tags

# Individual build jobs for each platform
build-linux-amd64:
  <<: *build-binary
  variables:
    GOOS: linux
    GOARCH: amd64

build-linux-arm64:
  <<: *build-binary
  variables:
    GOOS: linux
    GOARCH: arm64

build-darwin-amd64:
  <<: *build-binary
  variables:
    GOOS: darwin
    GOARCH: amd64

build-darwin-arm64:
  <<: *build-binary
  variables:
    GOOS: darwin
    GOARCH: arm64

build-windows-amd64:
  <<: *build-binary
  variables:
    GOOS: windows
    GOARCH: amd64

# Create GitLab release
release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  dependencies:
    - build-linux-amd64
    - build-linux-arm64
    - build-darwin-amd64
    - build-darwin-arm64
    - build-windows-amd64
  script:
    - |
      # Collect all binaries
      find binaries/ -type f -name "nest-up-*" | while read file; do
        echo "Found binary: $file"
      done

      # Generate release description
      cat > release_description.md << EOF
      # NeST Service Manager $CI_COMMIT_TAG

      ## ðŸš€ Features
      - Complete service management for NeST microservices
      - Embedded React web interface (no external dependencies)
      - Automatic environment variable setup
      - Lombok compatibility fixing
      - Real-time service monitoring and logs

      ## ðŸ“¦ Downloads

      | Platform | Architecture | Download |
      |----------|--------------|----------|
      | Linux | x64 | \`nest-up-linux-amd64\` |
      | Linux | ARM64 | \`nest-up-linux-arm64\` |
      | macOS | x64 | \`nest-up-darwin-amd64\` |
      | macOS | ARM64 (M1/M2) | \`nest-up-darwin-arm64\` |
      | Windows | x64 | \`nest-up-windows-amd64.exe\` |

      ## ðŸ”§ Quick Installation

      \`\`\`bash
      # Linux/macOS
      wget https://gitlab.com/$CI_PROJECT_PATH/-/releases/$CI_COMMIT_TAG/downloads/nest-up-linux-amd64
      chmod +x nest-up-linux-amd64
      ./nest-up-linux-amd64

      # Add to PATH (optional)
      sudo mv nest-up-linux-amd64 /usr/local/bin/nest-up
      \`\`\`

      ## ðŸ“‹ Checksums

      SHA256 checksums are provided for all binaries to verify integrity.
      EOF
  release:
    name: "NeST Service Manager $CI_COMMIT_TAG"
    description: "./release_description.md"
    tag_name: "$CI_COMMIT_TAG"
    assets:
      links:
        - name: "nest-up-linux-amd64"
          url: "$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/raw/binaries/nest-up-linux-amd64?job=build-linux-amd64"
          filepath: "/binaries/nest-up-linux-amd64"
        - name: "nest-up-linux-arm64"
          url: "$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/raw/binaries/nest-up-linux-arm64?job=build-linux-arm64"
          filepath: "/binaries/nest-up-linux-arm64"
        - name: "nest-up-darwin-amd64"
          url: "$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/raw/binaries/nest-up-darwin-amd64?job=build-darwin-amd64"
          filepath: "/binaries/nest-up-darwin-amd64"
        - name: "nest-up-darwin-arm64"
          url: "$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/raw/binaries/nest-up-darwin-arm64?job=build-darwin-arm64"
          filepath: "/binaries/nest-up-darwin-arm64"
        - name: "nest-up-windows-amd64.exe"
          url: "$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/raw/binaries/nest-up-windows-amd64.exe?job=build-windows-amd64"
          filepath: "/binaries/nest-up-windows-amd64.exe"
        - name: "checksums"
          url: "$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/browse/binaries?job=build-linux-amd64"
          filepath: "/checksums/"
  only:
    - tags
