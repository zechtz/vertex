# GitLab CI/CD Pipeline for Vertex Service Manager

stages:
  - build-frontend
  - build-binaries
  - release

variables:
  GO_VERSION: "1.23"
  NODE_VERSION: "18"
  PROJECT_NAME: "vertex"
  CGO_ENABLED: "1"

# Cache configuration for faster builds
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - web/node_modules/
    - .go/pkg/mod/

# Build frontend once and reuse
build-frontend:
  stage: build-frontend
  image: node:18-alpine
  script:
    - cd web
    - npm ci --cache .npm --prefer-offline
    - npm run build
  artifacts:
    paths:
      - web/dist/
    expire_in: 1 hour
  cache:
    key: frontend-${CI_COMMIT_REF_SLUG}
    paths:
      - web/node_modules/
      - web/.npm/

# Build binaries in parallel
.build_template: &build_template
  stage: build-binaries
  image: golang:1.23
  needs:
    - build-frontend
  before_script:
    - apt-get update -qq && apt-get install -y -qq git ca-certificates
    - mkdir -p .go
    - export GOPATH=${PWD}/.go
  script:
    - |
      BINARY_NAME="${PROJECT_NAME}-${GOOS}-${GOARCH}"
      if [ "$GOOS" = "windows" ]; then
        BINARY_NAME="${BINARY_NAME}.exe"
      fi
      
      echo "Building $BINARY_NAME..."
      go build -ldflags="-s -w -X main.version=${CI_COMMIT_TAG:-dev}" -o "${BINARY_NAME}"
      
      # Create checksum
      sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
      ls -lh "${BINARY_NAME}"*
  artifacts:
    paths:
      - ${PROJECT_NAME}-*
    expire_in: 1 hour
  cache:
    key: go-${CI_COMMIT_REF_SLUG}
    paths:
      - .go/pkg/mod/

build-linux-amd64:
  <<: *build_template
  variables:
    GOOS: linux
    GOARCH: amd64

build-linux-arm64:
  <<: *build_template
  before_script:
    - apt-get update -qq && apt-get install -y -qq git ca-certificates gcc-aarch64-linux-gnu
    - mkdir -p .go
    - export GOPATH=${PWD}/.go
    - export CC=aarch64-linux-gnu-gcc
  variables:
    GOOS: linux
    GOARCH: arm64

build-darwin-amd64:
  <<: *build_template
  variables:
    GOOS: darwin
    GOARCH: amd64
    CGO_ENABLED: "0"

build-darwin-arm64:
  <<: *build_template
  variables:
    GOOS: darwin
    GOARCH: arm64
    CGO_ENABLED: "0"

build-windows-amd64:
  <<: *build_template
  image: golang:1.23
  before_script:
    - apt-get update -qq && apt-get install -y -qq git ca-certificates gcc-mingw-w64
    - mkdir -p .go
    - export GOPATH=${PWD}/.go
    - export CC=x86_64-w64-mingw32-gcc
  variables:
    GOOS: windows
    GOARCH: amd64

# Create GitLab release
release:
  stage: release
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - build-linux-amd64
    - build-linux-arm64
    - build-darwin-amd64
    - build-darwin-arm64
    - build-windows-amd64
  before_script:
    - apk add --no-cache curl jq
  script:
    - |
      # Generate release notes
      cat > release-notes.md << EOF
      # Vertex Service Manager ${CI_COMMIT_TAG}
      
      ## ðŸš€ Features
      - Complete microservice management platform
      - Embedded React web interface (no external dependencies)
      - Cross-platform support (Linux, macOS, Windows)
      - Real-time service monitoring and logs
      - Automatic environment variable management
      - Lombok compatibility fixing
      - Maven wrapper auto-generation
      
      ## ðŸ“¦ Downloads
      
      | Platform | Architecture | Download | Size |
      |----------|--------------|----------|------|
      EOF
      
      # Add download table entries
      for f in ${PROJECT_NAME}-*; do
        case "$f" in
          *.sha256) continue ;;
          *)
            platform=$(echo "$f" | cut -d '-' -f2)
            arch=$(echo "$f" | cut -d '-' -f3 | cut -d '.' -f1)
            size=$(ls -lh "$f" | awk '{print $5}')
            echo "| $platform | $arch | \`$f\` | $size |" >> release-notes.md
            ;;
        esac
      done
      
      cat >> release-notes.md << EOF
      
      ## ðŸ”§ Quick Start
      
      \`\`\`bash
      # Download for your platform
      wget https://gitlab.com/${CI_PROJECT_PATH}/-/releases/${CI_COMMIT_TAG}/downloads/${PROJECT_NAME}-linux-amd64
      
      # Make executable
      chmod +x ${PROJECT_NAME}-linux-amd64
      
      # Run
      ./${PROJECT_NAME}-linux-amd64
      
      # Access web interface
      open http://localhost:8080
      \`\`\`
      
      ## ðŸ“‹ Checksums
      
      \`\`\`
      EOF
      
      # Add checksums
      cat *.sha256 >> release-notes.md
      echo '```' >> release-notes.md
      
      echo "Generated release notes:"
      cat release-notes.md
    
    - |
      # Create the release
      echo "Creating GitLab release..."
      echo "Project ID: $CI_PROJECT_ID"
      echo "Tag: $CI_COMMIT_TAG"
      echo "API URL: https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/releases"
      
      # Check if GITLAB_TOKEN is set
      if [ -z "$GITLAB_TOKEN" ]; then
        echo "ERROR: GITLAB_TOKEN is not set"
        echo "Please add GITLAB_TOKEN to your GitLab CI/CD variables"
        echo "Go to Project Settings -> CI/CD -> Variables"
        exit 1
      fi
      
      # Test API access first
      echo "Testing API access..."
      curl --fail --silent --show-error \
        --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID" > /dev/null || {
        echo "ERROR: Cannot access GitLab API"
        echo "Check that GITLAB_TOKEN has correct permissions (api, read_repository, write_repository)"
        exit 1
      }
      
      RELEASE_DATA=$(jq -n \
        --arg tag_name "$CI_COMMIT_TAG" \
        --arg name "Vertex Service Manager $CI_COMMIT_TAG" \
        --arg description "$(cat release-notes.md)" \
        '{
          tag_name: $tag_name,
          name: $name,
          description: $description
        }')
      
      echo "Creating release with data:"
      echo "$RELEASE_DATA" | jq .
      
      curl --fail --silent --show-error \
        --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        --header "Content-Type: application/json" \
        --data "$RELEASE_DATA" \
        "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/releases" || {
        echo "Failed to create release"
        echo "Response:"
        curl --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
             --header "Content-Type: application/json" \
             --data "$RELEASE_DATA" \
             "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/releases"
        exit 1
      }
      
      echo "Release created successfully"
    
    - |
      # Upload and attach binaries
      echo "Uploading binaries..."
      
      for f in ${PROJECT_NAME}-*; do
        case "$f" in
          *.sha256) continue ;;
          *)
            filename=$(basename "$f")
            echo "Uploading $filename..."
            
            # Upload file
            upload_response=$(curl --fail --silent \
              --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
              --form "file=@$f" \
              "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/uploads")
            
            if [ $? -ne 0 ]; then
              echo "Failed to upload $filename"
              continue
            fi
            
            url=$(echo "$upload_response" | jq -r '.url')
            full_url="${CI_PROJECT_URL}${url}"
            
            echo "Uploaded to: $full_url"
            
            # Attach to release
            curl --fail --silent \
              --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
              --data "name=$filename" \
              --data "url=$full_url" \
              "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/releases/$CI_COMMIT_TAG/assets/links" || {
              echo "Failed to attach $filename to release"
            }
            ;;
        esac
      done
      
      # Upload checksums file
      echo "Uploading checksums..."
      cat *.sha256 > checksums.txt
      
      upload_response=$(curl --fail --silent \
        --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        --form "file=@checksums.txt" \
        "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/uploads")
      
      if [ $? -eq 0 ]; then
        url=$(echo "$upload_response" | jq -r '.url')
        full_url="${CI_PROJECT_URL}${url}"
        
        curl --fail --silent \
          --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
          --data "name=checksums.txt" \
          --data "url=$full_url" \
          "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/releases/$CI_COMMIT_TAG/assets/links"
      fi
      
      echo "Release complete! Visit: ${CI_PROJECT_URL}/-/releases/${CI_COMMIT_TAG}"
